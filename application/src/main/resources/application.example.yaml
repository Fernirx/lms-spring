  # === LMS Application Configuration ===
  spring:
    application:
      name: ${APP_NAME:lms-application}
  
    config:
      activate:
        on-profile: example
  
    # === Database Configuration ===
    # Works out of the box with local MySQL
    datasource:
      url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:lms_db}?serverTimezone=${DB_TIMEZONE:Asia/Ho_Chi_Minh}&createDatabaseIfNotExist=${DB_CREATE_IF_NOT_EXIST:true}&useSSL=${DB_USE_SSL:false}&allowPublicKeyRetrieval=${DB_ALLOW_PUBLIC_KEY_RETRIEVAL:true}
      username: ${DB_USERNAME:root}
      password: ${DB_PASSWORD:password}
      driver-class-name: com.mysql.cj.jdbc.Driver
  
      hikari:
        maximum-pool-size: ${DB_POOL_SIZE:10}
        minimum-idle: ${DB_POOL_MIN_IDLE:5}
        connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
        idle-timeout: ${DB_IDLE_TIMEOUT:600000}
        max-lifetime: ${DB_MAX_LIFETIME:1800000}
        connection-test-query: ${DB_TEST_QUERY:SELECT 1}
  
    # === JPA/Hibernate Configuration ===
    jpa:
      hibernate:
        ddl-auto: ${JPA_DDL_AUTO:update}
      show-sql: ${JPA_SHOW_SQL:true}
      properties:
        hibernate:
          dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.MySQL8Dialect}
          format_sql: ${HIBERNATE_FORMAT_SQL:true}
          use_sql_comments: ${HIBERNATE_SQL_COMMENTS:true}
          jdbc:
            batch_size: ${HIBERNATE_BATCH_SIZE:20}
          order_inserts: ${HIBERNATE_ORDER_INSERTS:true}
          order_updates: ${HIBERNATE_ORDER_UPDATES:true}
  
    # === Email Configuration ===
    # Update with your Gmail credentials
    mail:
      host: ${MAIL_HOST:smtp.gmail.com}
      port: ${MAIL_PORT:587}
      username: ${MAIL_USERNAME:your-email@gmail.com}
      password: ${MAIL_PASSWORD:your-app-password}
      properties:
        mail:
          smtp:
            auth: ${MAIL_SMTP_AUTH:true}
            starttls:
              enable: ${MAIL_STARTTLS_ENABLE:true}
            connection-timeout: ${MAIL_CONNECTION_TIMEOUT:5000}
            timeout: ${MAIL_TIMEOUT:5000}
            write-timeout: ${MAIL_WRITE_TIMEOUT:5000}
  
    # === File Upload Configuration ===
    servlet:
      multipart:
        max-file-size: ${MAX_FILE_SIZE:10MB}
        max-request-size: ${MAX_REQUEST_SIZE:15MB}
        file-size-threshold: ${FILE_SIZE_THRESHOLD:2KB}
        location: ${UPLOAD_TEMP_DIR:/tmp}
  
    # === JSON Configuration ===
    jackson:
      time-zone: ${JACKSON_TIMEZONE:Asia/Ho_Chi_Minh}
      date-format: ${JACKSON_DATE_FORMAT:yyyy-MM-dd HH:mm:ss}
      default-property-inclusion: ${JACKSON_INCLUSION:NON_NULL}
  
  # === Server Configuration ===
  server:
    port: ${SERVER_PORT:8080}
    servlet:
      context-path: ${SERVER_CONTEXT_PATH:/api/lms}
      encoding:
        charset: UTF-8
        enabled: true
        force: true
  
    error:
      include-message: ${ERROR_INCLUDE_MESSAGE:always}
      include-binding-errors: ${ERROR_INCLUDE_BINDING:always}
      include-stacktrace: ${ERROR_INCLUDE_STACKTRACE:on_param}
  
    tomcat:
      threads:
        max: ${SERVER_MAX_THREADS:200}
        min-spare: ${SERVER_MIN_THREADS:10}
      connection-timeout: ${SERVER_CONNECTION_TIMEOUT:20000}
      accept-count: ${SERVER_ACCEPT_COUNT:100}
  
  # === Application Security ===
  application:
    security:
      jwt:
        # IMPORTANT: Change this secret in production!
        secret: ${JWT_SECRET:ChangeThisJWTSecretInProductionUse256BitKeyHere}
        expiration: ${JWT_EXPIRATION:30m}
        refresh-expiration: ${JWT_REFRESH_EXPIRATION:7d}
        reset-password-expiration: ${JWT_RESET_PASSWORD_EXPIRATION:15m}
        issuer: ${JWT_ISSUER:LMS-System}
  
    # === CORS Configuration ===
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://127.0.0.1:3000}
      allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
      allowed-headers: ${CORS_ALLOWED_HEADERS:*}
      allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
      max-age: ${CORS_MAX_AGE:3600s}
  
    # === Frontend URLs ===
    frontend:
      base-url: ${FRONTEND_BASE_URL:http://localhost:3000}
      login-url: ${FRONTEND_LOGIN_URL:http://localhost:3000/login}
  
    # === Caching Configuration ===
    cache:
      otp:
        maximum-size: ${OTP_MAXIMUM_SIZE:10000}
        expire-after-write: ${OTP_EXPIRE_AFTER:5m}
        max-attempts: ${OTP_MAX_ATTEMPTS:5}
        initial-capacity: ${OTP_INITIAL_CAPACITY:100}
        max-resend: ${OTP_MAX_RESEND:3}
        resend-cooldown: ${OTP_RESEND_COOLDOWN:60s}
  
  # === API Documentation (Swagger) ===
  springdoc:
    api-docs:
      path: ${SWAGGER_API_DOCS_PATH:/v3/api-docs}
      enabled: ${SWAGGER_ENABLED:true}
    swagger-ui:
      path: ${SWAGGER_UI_PATH:/swagger-ui}
      enabled: ${SWAGGER_UI_ENABLED:true}
      operations-sorter: method
      tags-sorter: alpha
      display-request-duration: true
      disable-swagger-default-url: true
    show-actuator: ${SWAGGER_SHOW_ACTUATOR:false}
  
  # === Monitoring & Health Checks ===
  management:
    endpoints:
      web:
        exposure:
          include: ${ACTUATOR_EXPOSED_ENDPOINTS:health,info,metrics}
        base-path: ${ACTUATOR_BASE_PATH:/actuator}
    endpoint:
      health:
        show-details: ${ACTUATOR_HEALTH_SHOW_DETAILS:when-authorized}
        show-components: ${ACTUATOR_HEALTH_SHOW_COMPONENTS:when-authorized}
    health:
      db:
        enabled: ${ACTUATOR_HEALTH_DB:true}
      mail:
        enabled: ${ACTUATOR_HEALTH_MAIL:true}
  
  # === Logging Configuration ===
  logging:
    level:
      root: ${LOG_LEVEL_ROOT:INFO}
      com.lms: ${LOG_LEVEL_APP:DEBUG}
      org.springframework.web: ${LOG_LEVEL_SPRING_WEB:INFO}
      org.springframework.security: ${LOG_LEVEL_SPRING_SECURITY:INFO}
      org.hibernate.SQL: ${LOG_LEVEL_HIBERNATE_SQL:DEBUG}
      org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_HIBERNATE_PARAMS:INFO}