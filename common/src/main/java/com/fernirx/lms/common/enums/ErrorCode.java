package com.fernirx.lms.common.enums;

import com.fasterxml.jackson.annotation.JsonValue;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;

import java.util.Arrays;
import java.util.Optional;

@Getter
@RequiredArgsConstructor
public enum ErrorCode {

    // ========== SYSTEM ERRORS (5xx) ==========
    INTERNAL_SERVER_ERROR("INTERNAL_SERVER_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
    SERVICE_UNAVAILABLE("SERVICE_UNAVAILABLE", HttpStatus.SERVICE_UNAVAILABLE),

    // ========== CLIENT ERRORS (4xx) ==========
    BAD_REQUEST("BAD_REQUEST", HttpStatus.BAD_REQUEST),
    REQUIRED_FIELD("REQUIRED_FIELD", HttpStatus.BAD_REQUEST),
    INVALID_EMAIL_FORMAT("INVALID_EMAIL_FORMAT", HttpStatus.BAD_REQUEST),
    INVALID_LENGTH("INVALID_LENGTH", HttpStatus.BAD_REQUEST),
    INVALID_FORMAT("INVALID_FORMAT", HttpStatus.BAD_REQUEST),
    INVALID_RANGE("INVALID_RANGE", HttpStatus.BAD_REQUEST),
    VALIDATION_ERROR("VALIDATION_ERROR", HttpStatus.BAD_REQUEST),
    METHOD_NOT_ALLOWED("METHOD_NOT_ALLOWED", HttpStatus.METHOD_NOT_ALLOWED),
    TOO_MANY_REQUESTS("TOO_MANY_REQUESTS", HttpStatus.TOO_MANY_REQUESTS),
    INVALID_ENUM("INVALID_ENUM", HttpStatus.BAD_REQUEST),
    INVALID_FIELD_TYPE("INVALID_FIELD_TYPE", HttpStatus.BAD_REQUEST),
    MALFORMED_JSON("MALFORMED_JSON", HttpStatus.BAD_REQUEST),

    // ========== AUTHENTICATION & AUTHORIZATION ERRORS (401/403) ==========
    UNAUTHORIZED("UNAUTHORIZED", HttpStatus.UNAUTHORIZED),
    INVALID_CREDENTIALS("INVALID_CREDENTIALS", HttpStatus.UNAUTHORIZED),
    TOKEN_EXPIRED("TOKEN_EXPIRED", HttpStatus.UNAUTHORIZED),
    TOKEN_INVALID("TOKEN_INVALID", HttpStatus.UNAUTHORIZED),
    INVALID_TOKEN_TYPE("INVALID_TOKEN_TYPE", HttpStatus.UNAUTHORIZED),
    UNSUPPORTED_TOKEN("UNSUPPORTED_TOKEN", HttpStatus.UNAUTHORIZED),
    JWT_VALIDATION_FAILED("JWT_VALIDATION_FAILED", HttpStatus.UNAUTHORIZED),
    MALFORMED_TOKEN("MALFORMED_TOKEN", HttpStatus.UNAUTHORIZED),
    ACCESS_DENIED("ACCESS_DENIED", HttpStatus.FORBIDDEN),
    INSUFFICIENT_PERMISSIONS("INSUFFICIENT_PERMISSIONS", HttpStatus.FORBIDDEN),

    // ========== NOT FOUND ERRORS (404) ==========
    NOT_FOUND("NOT_FOUND", HttpStatus.NOT_FOUND),
    USER_NOT_FOUND("USER_NOT_FOUND", HttpStatus.NOT_FOUND),
    ROLE_NOT_FOUND("ROLE_NOT_FOUND", HttpStatus.NOT_FOUND),
    COURSE_NOT_FOUND("COURSE_NOT_FOUND", HttpStatus.NOT_FOUND),
    CLASS_NOT_FOUND("CLASS_NOT_FOUND", HttpStatus.NOT_FOUND),
    STUDENT_NOT_FOUND("STUDENT_NOT_FOUND", HttpStatus.NOT_FOUND),
    TEACHER_NOT_FOUND("TEACHER_NOT_FOUND", HttpStatus.NOT_FOUND),
    SUBJECT_NOT_FOUND("SUBJECT_NOT_FOUND", HttpStatus.NOT_FOUND),
    DEPARTMENT_NOT_FOUND("DEPARTMENT_NOT_FOUND", HttpStatus.NOT_FOUND),
    SEMESTER_NOT_FOUND("SEMESTER_NOT_FOUND", HttpStatus.NOT_FOUND),
    ASSIGNMENT_NOT_FOUND("ASSIGNMENT_NOT_FOUND", HttpStatus.NOT_FOUND),
    GRADE_NOT_FOUND("GRADE_NOT_FOUND", HttpStatus.NOT_FOUND),
    DOCUMENT_NOT_FOUND("DOCUMENT_NOT_FOUND", HttpStatus.NOT_FOUND),

    // ========== CONFLICT ERRORS (409) ==========
    CONFLICT("CONFLICT", HttpStatus.CONFLICT),
    ALREADY_EXISTS("ALREADY_EXISTS", HttpStatus.CONFLICT),
    USERNAME_EXISTS("USERNAME_EXISTS", HttpStatus.CONFLICT),
    EMAIL_EXISTS("EMAIL_EXISTS", HttpStatus.CONFLICT),
    DUPLICATE_ENTRY("DUPLICATE_ENTRY", HttpStatus.CONFLICT),
    USER_ALREADY_EXISTS("USER_ALREADY_EXISTS", HttpStatus.CONFLICT),
    STUDENT_ALREADY_EXISTS("STUDENT_ALREADY_EXISTS", HttpStatus.CONFLICT),
    TEACHER_ALREADY_EXISTS("TEACHER_ALREADY_EXISTS", HttpStatus.CONFLICT),
    COURSE_ALREADY_EXISTS("COURSE_ALREADY_EXISTS", HttpStatus.CONFLICT),
    CLASS_ALREADY_EXISTS("CLASS_ALREADY_EXISTS", HttpStatus.CONFLICT),
    SUBJECT_ALREADY_EXISTS("SUBJECT_ALREADY_EXISTS", HttpStatus.CONFLICT),
    DEPARTMENT_ALREADY_EXISTS("DEPARTMENT_ALREADY_EXISTS", HttpStatus.CONFLICT),
    SEMESTER_ALREADY_EXISTS("SEMESTER_ALREADY_EXISTS", HttpStatus.CONFLICT),
    ASSIGNMENT_ALREADY_EXISTS("ASSIGNMENT_ALREADY_EXISTS", HttpStatus.CONFLICT),
    GRADE_ALREADY_EXISTS("GRADE_ALREADY_EXISTS", HttpStatus.CONFLICT),
    DOCUMENT_ALREADY_EXISTS("DOCUMENT_ALREADY_EXISTS", HttpStatus.CONFLICT),

    // ========== BUSINESS LOGIC ERRORS (422) ==========
    UNPROCESSABLE_ENTITY("UNPROCESSABLE_ENTITY", HttpStatus.UNPROCESSABLE_ENTITY),
    INVALID_STATUS_TRANSITION("INVALID_STATUS_TRANSITION", HttpStatus.UNPROCESSABLE_ENTITY),
    PREREQUISITE_NOT_MET("PREREQUISITE_NOT_MET", HttpStatus.UNPROCESSABLE_ENTITY),
    ENROLLMENT_CLOSED("ENROLLMENT_CLOSED", HttpStatus.UNPROCESSABLE_ENTITY),
    CAPACITY_EXCEEDED("CAPACITY_EXCEEDED", HttpStatus.UNPROCESSABLE_ENTITY);

    private final String code;
    private final HttpStatus httpStatus;

    @JsonValue
    public String getCode() {
        return code;
    }

    public static Optional<ErrorCode> fromCode(String code) {
        return Arrays.stream(values())
                .filter(e -> e.getCode().equals(code))
                .findFirst();
    }

    public static ErrorCode fromValidationCode(String validationCode) {
        return switch (validationCode) {
            case "NotNull", "NotBlank", "NotEmpty" -> REQUIRED_FIELD;
            case "Email" -> INVALID_EMAIL_FORMAT;
            case "Size" -> INVALID_LENGTH;
            case "Pattern" -> INVALID_FORMAT;
            case "Min", "Max" -> INVALID_RANGE;
            case "ValidEnum" -> INVALID_ENUM;
            default -> VALIDATION_ERROR;
        };
    }
}